/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DailyTicketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COOLDOWN"
      | "canPlay"
      | "claimDailyTicket"
      | "lastPlay"
      | "nextEligibleTimestamp"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TicketClaimed"): EventFragment;

  encodeFunctionData(functionFragment: "COOLDOWN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canPlay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDailyTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPlay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEligibleTimestamp",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "COOLDOWN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canPlay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDailyTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastPlay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextEligibleTimestamp",
    data: BytesLike
  ): Result;
}

export namespace TicketClaimedEvent {
  export type InputTuple = [player: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [player: string, timestamp: bigint];
  export interface OutputObject {
    player: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DailyTicket extends BaseContract {
  connect(runner?: ContractRunner | null): DailyTicket;
  waitForDeployment(): Promise<this>;

  interface: DailyTicketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  canPlay: TypedContractMethod<[player: AddressLike], [boolean], "view">;

  claimDailyTicket: TypedContractMethod<[], [void], "nonpayable">;

  lastPlay: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  nextEligibleTimestamp: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canPlay"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimDailyTicket"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastPlay"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextEligibleTimestamp"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;

  getEvent(
    key: "TicketClaimed"
  ): TypedContractEvent<
    TicketClaimedEvent.InputTuple,
    TicketClaimedEvent.OutputTuple,
    TicketClaimedEvent.OutputObject
  >;

  filters: {
    "TicketClaimed(address,uint256)": TypedContractEvent<
      TicketClaimedEvent.InputTuple,
      TicketClaimedEvent.OutputTuple,
      TicketClaimedEvent.OutputObject
    >;
    TicketClaimed: TypedContractEvent<
      TicketClaimedEvent.InputTuple,
      TicketClaimedEvent.OutputTuple,
      TicketClaimedEvent.OutputObject
    >;
  };
}
